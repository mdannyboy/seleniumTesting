# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAsanawebappsuite():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_loginwgoogle(self):
    # Test name: login w/ google
    # Step # | name | target | value
    # 1 | open | /-/login | 
    # Open asana
    self.driver.get("https://app.asana.com/-/login")
    # 3 | waitForElementPresent | css=.ThemeableRectangularButtonPresentation--xlarge | 3000
    # Wait for Google login button
    WebDriverWait(self.driver, 3).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, ".ThemeableRectangularButtonPresentation--xlarge")))
    # 4 | click | css=.ThemeableRectangularButtonPresentation--xlarge | 
    # click google login button
    self.driver.find_element(By.CSS_SELECTOR, ".ThemeableRectangularButtonPresentation--xlarge").click()
    # 5 | waitForElementPresent | xpath=//h1[contains(.,'Choose an account')] | 3000
    # Wait for choose account screen
    WebDriverWait(self.driver, 3).until(expected_conditions.presence_of_element_located((By.XPATH, "//h1[contains(.,\'Choose an account\')]")))
    # 6 | click | xpath=//div[@id='view_container']/div/div/div[2]/div/div/div/form/span/section/div/div/div/div/ul/li/div/div/div/div[2]/div | 
    # click account to login
    self.driver.find_element(By.XPATH, "//div[@id=\'view_container\']/div/div/div[2]/div/div/div/form/span/section/div/div/div/div/ul/li/div/div/div/div[2]/div").click()
    # 7 | pause | asdf | 5000
    # pause to allow page to load
    time.sleep(5)
    # 8 | waitForElementVisible | css=.GlobalTopbarStructure | 30000
    # wait for asana home page to show
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".GlobalTopbarStructure")))
    # 9 | assertElementPresent | xpath=//span/div/div | 
    # assert user profile icon present
    elements = self.driver.find_elements(By.XPATH, "//span/div/div")
    assert len(elements) > 0
  
  def test_createproject(self):
    # Test name: create project
    # Step # | name | target | value
    # 1 | open | https://app.asana.com | 
    # Open Asana site
    self.driver.get("https://app.asana.com")
    # 3 | runScript | window.scrollTo(0,0) | 
    self.driver.execute_script("window.scrollTo(0,0)")
    # 4 | waitForElementVisible | css=.GlobalTopbarStructure | 30000
    # wait for top bar to show
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".GlobalTopbarStructure")))
    # 5 | assertElementPresent | css=.GlobalTopbarStructure | 
    # ensure top bar showing
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".GlobalTopbarStructure")
    assert len(elements) > 0
    # 6 | waitForElementVisible | css=.LinearSortableList | 30000
    # wait for sidebar to be visible
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".LinearSortableList")))
    # 7 | assertElementPresent | css=.ThemeableIconButtonPresentation--isEnabled:nth-child(2) > .MiniIcon > path | 
    # ensure project + visible
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".ThemeableIconButtonPresentation--isEnabled:nth-child(2) > .MiniIcon > path")
    assert len(elements) > 0
    # 8 | click | css=.ThemeableIconButtonPresentation--isEnabled:nth-child(2) > .MiniIcon > path | 
    # click the + by Projects
    self.driver.find_element(By.CSS_SELECTOR, ".ThemeableIconButtonPresentation--isEnabled:nth-child(2) > .MiniIcon > path").click()
    # 9 | click | css=.LeftIconItemStructure--isHighlighted > .TypographyPresentation | 
    # Click new project
    self.driver.find_element(By.CSS_SELECTOR, ".LeftIconItemStructure--isHighlighted > .TypographyPresentation").click()
    # 10 | click | css=.DashedTile--large > .DashedTile-inner | 
    # click blank project
    self.driver.find_element(By.CSS_SELECTOR, ".DashedTile--large > .DashedTile-inner").click()
    # 11 | type | id=new_project_dialog_content_name_input | project2
    # enter project name 'project2'
    self.driver.find_element(By.ID, "new_project_dialog_content_name_input").send_keys("project2")
    # 12 | click | css=.PrimaryButton--standardTheme | 
    # click "create project" button
    self.driver.find_element(By.CSS_SELECTOR, ".PrimaryButton--standardTheme").click()
    # 13 | runScript | window.scrollTo(0,0) | 
    self.driver.execute_script("window.scrollTo(0,0)")
    # 14 | waitForElementVisible | css=.AsanaBaseTopbar | 30000
    # wait for top bar to be visible
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".AsanaBaseTopbar")))
    # 15 | assertValue | css=.TextInputBase | project2
    # ensure project page is showing
    value = self.driver.find_element(By.CSS_SELECTOR, ".TextInputBase").get_attribute("value")
    assert value == "project2"
  
  def test_openproject(self):
    # Test name: open project
    # Step # | name | target | value
    # 1 | open | /0/home/1205724578603564 | 
    # open asana site
    self.driver.get("https://app.asana.com/0/home/1205724578603564")
    # 2 | setWindowSize | 1460x921 | 
    self.driver.set_window_size(1460, 921)
    # 3 | waitForElementVisible | css=.LinearSortableList | 30000
    # wait for sidebar to be visible
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".LinearSortableList")))
    # 4 | assertElementPresent | xpath=//span[contains(.,'project2')] | 
    # ensure project2 exists in sidebar
    elements = self.driver.find_elements(By.XPATH, "//span[contains(.,\'project2\')]")
    assert len(elements) > 0
    # 5 | click | xpath=//span[contains(.,'project2')] | 
    # click project2
    self.driver.find_element(By.XPATH, "//span[contains(.,\'project2\')]").click()
    # 6 | runScript | window.scrollTo(0,0) | 
    self.driver.execute_script("window.scrollTo(0,0)")
    # 7 | waitForElementPresent | css=.AsanaBaseTopbar | 30000
    # wait for project2 top bar
    WebDriverWait(self.driver, 30).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, ".AsanaBaseTopbar")))
    # 8 | assertElementPresent | css=.AsanaBaseTopbar | 
    # ensure top bar present
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".AsanaBaseTopbar")
    assert len(elements) > 0
    # 9 | assertValue | css=.TextInputBase | project2
    # ensure title of showing project is project2
    value = self.driver.find_element(By.CSS_SELECTOR, ".TextInputBase").get_attribute("value")
    assert value == "project2"
  
  def test_createtaskinlist(self):
    # Test name: create task in list
    # Step # | name | target | value
    # 1 | open | /0/home/1205724578603564 | 
    # open Asana site
    self.driver.get("https://app.asana.com/0/home/1205724578603564")
    # 2 | setWindowSize | 1458x919 | 
    self.driver.set_window_size(1458, 919)
    # 3 | assertElementPresent | css=.AvatarPhoto-image | 
    # ensure profile image is present
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".AvatarPhoto-image")
    assert len(elements) > 0
    # 4 | waitForElementVisible | css=.LinearSortableList | 30000
    # wait for sidebar to be visible
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".LinearSortableList")))
    # 5 | click | xpath=//span[contains(.,'project2')] | 
    # click "project2" created in create project test
    self.driver.find_element(By.XPATH, "//span[contains(.,\'project2\')]").click()
    # 6 | runScript | window.scrollTo(0,0) | 
    self.driver.execute_script("window.scrollTo(0,0)")
    # 7 | waitForElementVisible | css=.TopbarPageHeaderStructureWithBreadcrumbs-titleAndBreadcrumbs | 30000
    # wait for project top bar to be visible
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".TopbarPageHeaderStructureWithBreadcrumbs-titleAndBreadcrumbs")))
    # 8 | assertValue | css=.TextInputBase | project2
    # ensure project2 is showing
    value = self.driver.find_element(By.CSS_SELECTOR, ".TextInputBase").get_attribute("value")
    assert value == "project2"
    # 9 | assertElementPresent | css=.SecondarySplitDropdownMenuButtonA11y-leftButton | 
    # ensure add task button present
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".SecondarySplitDropdownMenuButtonA11y-leftButton")
    assert len(elements) > 0
    # 10 | click | css=.SecondarySplitDropdownMenuButtonA11y-leftButton | 
    # click add task
    self.driver.find_element(By.CSS_SELECTOR, ".SecondarySplitDropdownMenuButtonA11y-leftButton").click()
    # 11 | click | xpath=//textarea | 
    # click text entry area
    self.driver.find_element(By.XPATH, "//textarea").click()
    # 12 | type | xpath=//textarea | some new task
    # enter "some new task" for task title
    self.driver.find_element(By.XPATH, "//textarea").send_keys("some new task")
    # 13 | click | css=.PlaceholderAvatar > .CalendarMiniIcon | 
    # click date area
    self.driver.find_element(By.CSS_SELECTOR, ".PlaceholderAvatar > .CalendarMiniIcon").click()
    # 14 | click | xpath=//div[4]/div[5]/span | 
    # select a date
    self.driver.find_element(By.XPATH, "//div[4]/div[5]/span").click()
    # 15 | assertElementPresent | xpath=//main[@id='asana_main_page']/div/div/div/div[2]/div[2]/div/div[2]/div[2]/div/div[2]/div/div/div/div/div/div/div/div[2]/div/div/div/div/div/div | 
    # ensure new task exists
    elements = self.driver.find_elements(By.XPATH, "//main[@id=\'asana_main_page\']/div/div/div/div[2]/div[2]/div/div[2]/div[2]/div/div[2]/div/div/div/div/div/div/div/div[2]/div/div/div/div/div/div")
    assert len(elements) > 0
  
  def test_logout(self):
    # Test name: logout
    # Step # | name | target | value
    # 1 | open | /0/home/1205724578603564 | 
    # open asana site
    self.driver.get("https://app.asana.com/0/home/1205724578603564")
    # 2 | setWindowSize | 1458x920 | 
    self.driver.set_window_size(1458, 920)
    # 3 | waitForElementVisible | css=.LinearSortableList | 30000
    # wait for sidebar to be visible
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".LinearSortableList")))
    # 4 | click | xpath=//span[contains(.,'Home')] | 
    # click home in sidebar
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Home\')]").click()
    # 5 | waitForElementVisible | css=.HomePageContent-content | 30000
    # wait for home to show
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".HomePageContent-content")))
    # 6 | assertElementPresent | xpath=//span/div/div | 
    # ensure profile icon showing
    elements = self.driver.find_elements(By.XPATH, "//span/div/div")
    assert len(elements) > 0
    # 7 | click | css=.ThemeableRectangularButtonPresentation-leftIcon > .MiniIcon | 
    # click icon arrow
    self.driver.find_element(By.CSS_SELECTOR, ".ThemeableRectangularButtonPresentation-leftIcon > .MiniIcon").click()
    # 8 | runScript | window.scrollTo(0,0) | 
    self.driver.execute_script("window.scrollTo(0,0)")
    # 9 | waitForElementVisible | xpath=//span[contains(.,'Log out')] | 30000
    # wait for logout to be visible
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//span[contains(.,\'Log out\')]")))
    # 10 | click | xpath=//span[contains(.,'Log out')] | 
    # click logout
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Log out\')]").click()
    # 11 | waitForElementVisible | xpath=//div[@id='Login-appRoot']/div | 30000
    # wait for login screen to appear
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//div[@id=\'Login-appRoot\']/div")))
    # 12 | assertElementPresent | xpath=//span[contains(.,'To get started, please sign in')] | 
    # ensure login message present
    elements = self.driver.find_elements(By.XPATH, "//span[contains(.,\'To get started, please sign in\')]")
    assert len(elements) > 0
  
